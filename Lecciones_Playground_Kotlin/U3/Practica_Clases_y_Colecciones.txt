----------- Tarea 1 --------------------
data class Event(
    val title: String,
    val description: String? = null,
    val daypart: String,
    val durationInMinutes: Int,
)

fun main() {
    val event = Event(
        title = "Study Kotlin",
        description = "Commit to studying Kotlin at least 15 minutes per day.",
        daypart = "Evening",
        durationInMinutes = 15
    )
    println(event)
}

/*
----------- Tarea 2 --------------------
enum class Daypart {
    MORNING,
    AFTERNOON,
    EVENING
}

data class Event(
    val title: String,
    val description: String? = null,
    val daypart: Daypart,
    val durationInMinutes: Int,
)

fun main() {
    val event = Event(
        title = "Study Kotlin",
        description = "Commit to studying Kotlin at least 15 minutes per day.",
        daypart = Daypart.EVENING,
        durationInMinutes = 15
    )
    println(event)
}

----------- Tarea 3 --------------------
// Enum para representar las franjas del día
enum class Daypart {
    MORNING,
    AFTERNOON,
    EVENING
}

// Clase de datos para eventos
data class Event(
    val title: String,
    val description: String? = null,
    val daypart: Daypart,
    val durationInMinutes: Int,
)

fun main() {
    // Crear eventos individuales
    val event1 = Event(title = "Wake up", description = "Time to get up", daypart = Daypart.MORNING, durationInMinutes = 0)
    val event2 = Event(title = "Eat breakfast", daypart = Daypart.MORNING, durationInMinutes = 15)
    val event3 = Event(title = "Learn about Kotlin", daypart = Daypart.AFTERNOON, durationInMinutes = 30)
    val event4 = Event(title = "Practice Compose", daypart = Daypart.AFTERNOON, durationInMinutes = 60)
    val event5 = Event(title = "Watch latest DevBytes video", daypart = Daypart.AFTERNOON, durationInMinutes = 10)
    val event6 = Event(title = "Check out latest Android Jetpack library", daypart = Daypart.EVENING, durationInMinutes = 45)

    // Lista mutable de eventos
    val events = mutableListOf(event1, event2, event3, event4, event5, event6)
    println(events)
}

----------- Tarea 4 --------------------
// Enum para representar las franjas del día
enum class Daypart {
    MORNING,
    AFTERNOON,
    EVENING
}

// Clase de datos para eventos
data class Event(
    val title: String,
    val description: String? = null,
    val daypart: Daypart,
    val durationInMinutes: Int,
)

fun main() {
    // Crear eventos individuales
    val event1 = Event(title = "Wake up", description = "Time to get up", daypart = Daypart.MORNING, durationInMinutes = 0)
    val event2 = Event(title = "Eat breakfast", description = null, daypart = Daypart.MORNING, durationInMinutes = 15)
    val event3 = Event(title = "Learn about Kotlin", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 30)
    val event4 = Event(title = "Practice Compose", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 60)
    val event5 = Event(title = "Watch latest DevBytes video", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 10)
    val event6 = Event(title = "Check out latest Android Jetpack library", description = null, daypart = Daypart.EVENING, durationInMinutes = 45)

    // Lista mutable de eventos
    val events = mutableListOf(event1, event2, event3, event4, event5, event6)

    // Mostrar cantidad total de eventos
    println("Total events scheduled: ${events.size}")

    // Mostrar todos los eventos
    events.forEach {
        println(it)
    }

    println() // Línea en blanco para separar

    // Filtrar eventos cortos (menos de 60 min) y mostrar cantidad
    val shortEvents = events.filter { it.durationInMinutes < 60 }
    println("You have ${shortEvents.size} short events.")
}

----------- Tarea 5 --------------------
// Enum para representar las franjas del día
enum class Daypart {
    MORNING,
    AFTERNOON,
    EVENING
}

// Clase de datos para eventos
data class Event(
    val title: String,
    val description: String? = null,
    val daypart: Daypart,
    val durationInMinutes: Int,
)

fun main() {
    // Crear eventos individuales
    val event1 = Event(title = "Wake up", description = "Time to get up", daypart = Daypart.MORNING, durationInMinutes = 0)
    val event2 = Event(title = "Eat breakfast", description = null, daypart = Daypart.MORNING, durationInMinutes = 15)
    val event3 = Event(title = "Learn about Kotlin", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 30)
    val event4 = Event(title = "Practice Compose", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 60)
    val event5 = Event(title = "Watch latest DevBytes video", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 10)
    val event6 = Event(title = "Check out latest Android Jetpack library", description = null, daypart = Daypart.EVENING, durationInMinutes = 45)

    // Lista mutable de eventos
    val events = mutableListOf(event1, event2, event3, event4, event5, event6)

    // Mostrar cantidad total de eventos
    println("Total events scheduled: ${events.size}")

    // Mostrar todos los eventos
    events.forEach {
        println(it)
    }

    println() // Línea en blanco para separar

    // Filtrar eventos cortos (menos de 60 min) y mostrar cantidad
    val shortEvents = events.filter { it.durationInMinutes < 60 }
    println("You have ${shortEvents.size} short events.\n")

    // Agrupar eventos por franja horaria y mostrar resumen
    val groupedEvents = events.groupBy { it.daypart }
    groupedEvents.forEach { (daypart, eventsByDaypart) ->
        println("${daypart.name.lowercase().replaceFirstChar { it.uppercase() }}: ${eventsByDaypart.size} events")
    }
}

----------- Tarea 6 --------------------
// Enum para representar las franjas del día
enum class Daypart {
    MORNING,
    AFTERNOON,
    EVENING
}

// Clase de datos para eventos
data class Event(
    val title: String,
    val description: String? = null,
    val daypart: Daypart,
    val durationInMinutes: Int,
)

fun main() {
    // Crear eventos individuales
    val event1 = Event(title = "Wake up", description = "Time to get up", daypart = Daypart.MORNING, durationInMinutes = 0)
    val event2 = Event(title = "Eat breakfast", description = null, daypart = Daypart.MORNING, durationInMinutes = 15)
    val event3 = Event(title = "Learn about Kotlin", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 30)
    val event4 = Event(title = "Practice Compose", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 60)
    val event5 = Event(title = "Watch latest DevBytes video", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 10)
    val event6 = Event(title = "Check out latest Android Jetpack library", description = null, daypart = Daypart.EVENING, durationInMinutes = 45)

    // Lista mutable de eventos
    val events = mutableListOf(event1, event2, event3, event4, event5, event6)

    // Mostrar resumen de eventos cortos
    val shortEvents = events.filter { it.durationInMinutes < 60 }
    println("You have ${shortEvents.size} short events.\n")

    // Agrupar eventos por franja horaria y mostrar resumen
    val groupedEvents = events.groupBy { it.daypart }
    groupedEvents.forEach { (daypart, eventsByDaypart) ->
        println("${daypart.name.lowercase().replaceFirstChar { it.uppercase() }}: ${eventsByDaypart.size} events")
    }

    println("\nLast event of the day: ${events.last().title}")
}

----------- Tarea 7 --------------------
// Enum para representar las franjas del día
enum class Daypart {
    MORNING,
    AFTERNOON,
    EVENING
}

// Clase de datos para eventos
data class Event(
    val title: String,
    val description: String? = null,
    val daypart: Daypart,
    val durationInMinutes: Int,
)

// Se crea una propiedad de extensión llamada durationOfEvent para la clase Event para darle una descripción
// (en este caso "short" o "long")
val Event.durationOfEvent: String
    get() = if (this.durationInMinutes < 60) {
        "short"
    } else {
        "long"
    }

fun main() {
    // Crear eventos individuales
    val event1 = Event(title = "Wake up", description = "Time to get up", daypart = Daypart.MORNING, durationInMinutes = 0)
    val event2 = Event(title = "Eat breakfast", description = null, daypart = Daypart.MORNING, durationInMinutes = 15)
    val event3 = Event(title = "Learn about Kotlin", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 30)
    val event4 = Event(title = "Practice Compose", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 60)
    val event5 = Event(title = "Watch latest DevBytes video", description = null, daypart = Daypart.AFTERNOON, durationInMinutes = 10)
    val event6 = Event(title = "Check out latest Android Jetpack library", description = null, daypart = Daypart.EVENING, durationInMinutes = 45)

    // Lista mutable de eventos
    val events = mutableListOf(event1, event2, event3, event4, event5, event6)

    // Mostrar resumen de eventos cortos
    val shortEvents = events.filter { it.durationInMinutes < 60 }
    println("You have ${shortEvents.size} short events.\n")

    // Agrupar eventos por franja horaria y mostrar resumen
    val groupedEvents = events.groupBy { it.daypart }
    groupedEvents.forEach { (daypart, eventsByDaypart) ->
        println("${daypart.name.lowercase().replaceFirstChar { it.uppercase() }}: ${eventsByDaypart.size} events")
    }

    println("\nLast event of the day: ${events.last().title}")

    // Llama a la propiedad de extensión que se creó para obtener si ese evento es "short" o "long"
    // (según su duración).
    println("\nDuration of first event of the day: ${events[0].durationOfEvent}")
}

 */