//--------Palabra clave fun--------------
fun main() {
    val trickFunction = trick
}

fun trick() {
    println("No treats!")
}

/*
fun main() {
    val trickFunction = ::trick
}

fun trick() {
    println("No treats!")
}


//----------Expresión lambda-------------
fun main() {
    val trickFunction = trick
    trick()
}

val trick = {
    println("No treats!")
}


fun main() {
    val trickFunction = trick
    trick()
    trickFunction()
}

val trick = {
    println("No treats!")
}

//---------Funciones como un tipo de datos----------
val trick = {
    println("No treats!")
}

val treat: () -> Unit = {
    println("Have a treat!")
}

fun main() {
    val trickFunction = trick
    trick()
    trickFunction()
    treat()
}

//----------Función que muestre una función-----------
fun main() {
    val treatFunction = trickOrTreat(false)
    val trickFunction = trickOrTreat(true)
    treatFunction()
    trickFunction()
}

fun trickOrTreat(isTrick: Boolean): () -> Unit {
    val trick = {
        println("No treats!")
    }
    val treat = {
        println("Have a treat!")
    }
    if (isTrick) {
        return trick
    } else {
        return treat
    }
}

//--------Función a otra como un argumento-----------
fun main() {
    val coins: (Int) -> String = { quantity ->
        "$quantity quarters"
    }

    val cupcake: (Int) -> String = {
        "Have a cupcake!"
    }

    val treatFunction = trickOrTreat(false, coins)
    val trickFunction = trickOrTreat(true, cupcake)
    treatFunction()
    trickFunction()
}

fun trickOrTreat(isTrick: Boolean, extraTreat: (Int) -> String): () -> Unit {
    val trick = {
        println("No treats!")
    }
    val treat = {
        println("Have a treat!")
    }
    if (isTrick) {
        return trick
    } else {
        println(extraTreat(5))
        return treat
    }
}

//--------------Tipos de funciones anulables----------
fun main() {
    val coins: (Int) -> String = { quantity ->
        "$quantity quarters"
    }

    val treatFunction = trickOrTreat(false, coins)
    val trickFunction = trickOrTreat(true, null)
    treatFunction()
    trickFunction()
}

fun trickOrTreat(isTrick: Boolean, extraTreat: ((Int) -> String)?): () -> Unit {
    val trick = {
        println("No treats!")
    }
    val treat = {
        println("Have a treat!")
    }
    if (isTrick) {
        return trick
    } else {
        if (extraTreat != null) {
            println(extraTreat(5))
        }
        return treat
    }
}

//--------Omitir el nombre del parámetro--------------
fun main() {
    val coins: (Int) -> String = {
        "$it quarters"
    }

    val treatFunction = trickOrTreat(false, coins)
    val trickFunction = trickOrTreat(true, null)
    treatFunction()
    trickFunction()
}

fun trickOrTreat(isTrick: Boolean, extraTreat: ((Int) -> String)?): () -> Unit {
    val trick = {
        println("No treats!")
    }
    val treat = {
        println("Have a treat!")
    }
    if (isTrick) {
        return trick
    } else {
        if (extraTreat != null) {
            println(extraTreat(5))
        }
        return treat
    }
}


//-----Pasar una expresión lambda directamente a una función----------
fun main() {
    val treatFunction = trickOrTreat(false, { "$it quarters" })
    val trickFunction = trickOrTreat(true, null)
    treatFunction()
    trickFunction()
}

fun trickOrTreat(isTrick: Boolean, extraTreat: ((Int) -> String)?): () -> Unit {
    val trick = {
        println("No treats!")
    }
    val treat = {
        println("Have a treat!")
    }
    if (isTrick) {
        return trick
    } else {
        if (extraTreat != null) {
            println(extraTreat(5))
        }
        return treat
    }
}

//-----Usar la sintaxis de expresión lambda al final------------
fun main() {
    val treatFunction = trickOrTreat(false) { "$it quarters" }
    val trickFunction = trickOrTreat(true, null)
    treatFunction()
    trickFunction()
}

fun trickOrTreat(isTrick: Boolean, extraTreat: ((Int) -> String)?): () -> Unit {
    val trick = {
        println("No treats!")
    }
    val treat = {
        println("Have a treat!")
    }
    if (isTrick) {
        return trick
    } else {
        if (extraTreat != null) {
            println(extraTreat(5))
        }
        return treat
    }
}


//---------Función repeat()---------------------
fun main() {
    val treatFunction = trickOrTreat(false) { "$it quarters" }
    val trickFunction = trickOrTreat(true, null)
    repeat(4) {
        treatFunction()
    }
    trickFunction()
}

fun trickOrTreat(isTrick: Boolean, extraTreat: ((Int) -> String)?): () -> Unit {
    val trick = {
        println("No treats!")
    }
    val treat = {
        println("Have a treat!")
    }
    if (isTrick) {
        return trick
    } else {
        if (extraTreat != null) {
            println(extraTreat(5))
        }
        return treat
    }
}










 */